// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WWMS.DAL.Persistences;

#nullable disable

namespace WWMS.DAL.Migrations
{
    [DbContext(typeof(WineWarehouseDbContext))]
    partial class WineWarehouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WWMS.DAL.Entities.AdditionalImportRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("AdditionalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("additional_quantity");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<long>("ExportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("export_request_id");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("import_date");

                    b.Property<long>("ImportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("import_request_id");

                    b.Property<long>("InventoryCheckRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_check_request_id");

                    b.Property<string>("ReporterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reporter_name");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_code");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("requester_name");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status");

                    b.Property<string>("Supplier")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("supplier");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("total_value");

                    b.Property<string>("TransportDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transport_details");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("WarehouseLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("warehouse_location");

                    b.HasKey("Id")
                        .HasName("additional_import_request_id_primary");

                    b.HasIndex("ExportRequestId");

                    b.HasIndex("ImportRequestId");

                    b.HasIndex("InventoryCheckRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Additional_Import_Request", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action_description");

                    b.Property<string>("ActionType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("action_type");

                    b.Property<string>("DeviceDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("device_details");

                    b.Property<int?>("DurationMs")
                        .HasColumnType("int")
                        .HasColumnName("duration_ms");

                    b.Property<string>("ErrorDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("error_details");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("PerformedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("performed_at");

                    b.Property<string>("RequestMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("request_method");

                    b.Property<string>("RequestUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_url");

                    b.Property<long?>("ResponseSize")
                        .HasColumnType("bigint")
                        .HasColumnName("response_size");

                    b.Property<string>("ResponseStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("response_status");

                    b.Property<decimal?>("ResponseTime")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("response_time");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("session_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("audit_log_id_primary");

                    b.HasIndex("UserId");

                    b.ToTable("Audit_Log", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.CheckRequestWarehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CheckerAssigned")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("checker_assigned");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<int?>("Discrepancies")
                        .HasColumnType("int")
                        .HasColumnName("discrepancies");

                    b.Property<DateTime?>("ExpectedCompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expected_completion_date");

                    b.Property<long>("InventoryCheckRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_check_request_id");

                    b.Property<int?>("ItemsChecked")
                        .HasColumnType("int")
                        .HasColumnName("items_checked");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_code");

                    b.Property<string>("RequestStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("request_status");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("requested_at");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("int")
                        .HasColumnName("total_items");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WarehouseName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("warehouse_name");

                    b.HasKey("Id")
                        .HasName("check_request_warehouse_id_primary");

                    b.HasIndex("InventoryCheckRequestId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Check_Request_Warehouse", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ExportRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<string>("CustomsStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("customs_status");

                    b.Property<string>("DeliveryTerms")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("delivery_terms");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("destination_address");

                    b.Property<DateTime?>("ExpectedDelivery")
                        .HasColumnType("datetime2")
                        .HasColumnName("expected_delivery");

                    b.Property<DateTime?>("ExportDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("export_date");

                    b.Property<bool?>("FragileItems")
                        .HasColumnType("bit")
                        .HasColumnName("fragile_items");

                    b.Property<string>("InsuranceCoverage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("insurance_coverage");

                    b.Property<string>("PackagingInstructions")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("packaging_instructions");

                    b.Property<string>("ReporterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reporter_name");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_code");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("requester_name");

                    b.Property<string>("ShippingCompany")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shipping_company");

                    b.Property<string>("ShippingTrackingNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shipping_tracking_number");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("total_quantity");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("total_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("WineId")
                        .HasColumnType("bigint")
                        .HasColumnName("wine_id");

                    b.HasKey("Id")
                        .HasName("export_request_id_primary");

                    b.HasIndex("UserId");

                    b.HasIndex("WineId");

                    b.ToTable("Export_Request", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ExportWineWarehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ExportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("export_request_id");

                    b.Property<long>("WineWarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("wine_warehouse_id");

                    b.HasKey("Id")
                        .HasName("PK__Export_W__3213E83FDCC5E67C");

                    b.HasIndex("ExportRequestId");

                    b.HasIndex("WineWarehouseId");

                    b.ToTable("Export_Wine_Warehouse", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ImportRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<string>("CustomsClearance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("customs_clearance");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("delivery_status");

                    b.Property<DateTime?>("ExpectedArrival")
                        .HasColumnType("datetime2")
                        .HasColumnName("expected_arrival");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("import_date");

                    b.Property<string>("InsuranceProvider")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("insurance_provider");

                    b.Property<string>("ReporterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reporter_name");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_code");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("requester_name");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shipping_method");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("status");

                    b.Property<string>("Supplier")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("supplier");

                    b.Property<string>("TaxDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tax_details");

                    b.Property<int?>("TotalQuantity")
                        .HasColumnType("int")
                        .HasColumnName("total_quantity");

                    b.Property<decimal?>("TotalValue")
                        .HasColumnType("decimal(15, 2)")
                        .HasColumnName("total_value");

                    b.Property<string>("TransportDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("transport_details");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("WarehouseLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("warehouse_location");

                    b.Property<long>("WineId")
                        .HasColumnType("bigint")
                        .HasColumnName("wine_id");

                    b.HasKey("Id")
                        .HasName("import_request_id_primary");

                    b.HasIndex("UserId");

                    b.HasIndex("WineId");

                    b.ToTable("Import_Request", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.InventoryCheckRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attachments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("attachments");

                    b.Property<string>("AuditReference")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("audit_reference");

                    b.Property<string>("CheckPurpose")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("check_purpose");

                    b.Property<string>("CheckerAssigned")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("checker_assigned");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2")
                        .HasColumnName("deadline");

                    b.Property<int?>("Discrepancies")
                        .HasColumnType("int")
                        .HasColumnName("discrepancies");

                    b.Property<DateTime?>("ExpectedCompletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expected_completion_date");

                    b.Property<int?>("ItemsChecked")
                        .HasColumnType("int")
                        .HasColumnName("items_checked");

                    b.Property<string>("ReporterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reporter_name");

                    b.Property<string>("RequestCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("request_code");

                    b.Property<string>("RequestPriority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("request_priority");

                    b.Property<string>("RequestStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("request_status");

                    b.Property<DateTime?>("RequestedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("requested_at");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("requester_name");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("int")
                        .HasColumnName("total_items");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("inventory_check_request_id_primary");

                    b.HasIndex("UserId");

                    b.ToTable("Inventory_Check_Request", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdditionalImportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("additional_import_request_id");

                    b.Property<string>("DamageReport")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("damage_report");

                    b.Property<int?>("DiscrepanciesFound")
                        .HasColumnType("int")
                        .HasColumnName("discrepancies_found");

                    b.Property<long?>("ExportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("export_request_id");

                    b.Property<string>("FileAttachment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_attachment");

                    b.Property<DateTime?>("FinalApprovalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("final_approval_date");

                    b.Property<DateTime?>("ImportDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("import_date");

                    b.Property<long?>("ImportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("import_request_id");

                    b.Property<long?>("InventoryCheckRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("inventory_check_request_id");

                    b.Property<int?>("ItemsImported")
                        .HasColumnType("int")
                        .HasColumnName("items_imported");

                    b.Property<DateTime?>("PreparedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("prepared_at");

                    b.Property<string>("ReportDescription")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("report_description");

                    b.Property<string>("ReportPreparedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("report_prepared_by");

                    b.Property<string>("ReportStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("report_status");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("review_comments");

                    b.Property<string>("SignOffBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("sign_off_by");

                    b.Property<string>("SupplierFeedback")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("supplier_feedback");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("report_id_primary");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ExportRequestId" }, "UQ__Report__42A76907FBF5270C")
                        .IsUnique()
                        .HasFilter("[export_request_id] IS NOT NULL");

                    b.HasIndex(new[] { "AdditionalImportRequestId" }, "UQ__Report__554DA09A96662158")
                        .IsUnique()
                        .HasFilter("[additional_import_request_id] IS NOT NULL");

                    b.HasIndex(new[] { "InventoryCheckRequestId" }, "UQ__Report__8099F7E53B1391DC")
                        .IsUnique()
                        .HasFilter("[inventory_check_request_id] IS NOT NULL");

                    b.HasIndex(new[] { "ImportRequestId" }, "UQ__Report__C75CF497B655D9AD")
                        .IsUnique()
                        .HasFilter("[import_request_id] IS NOT NULL");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_status");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone_number");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("user_id_primary");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<bool?>("ClimateControl")
                        .HasColumnType("bit")
                        .HasColumnName("climate_control");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contact_phone");

                    b.Property<int?>("CurrentOccupancy")
                        .HasColumnType("int")
                        .HasColumnName("current_occupancy");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("emergency_contact");

                    b.Property<string>("FireSafetyStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fire_safety_status");

                    b.Property<string>("InspectionFrequency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("inspection_frequency");

                    b.Property<string>("InsuranceCoverage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("insurance_coverage");

                    b.Property<string>("LocationAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("location_address");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("manager_name");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("int")
                        .HasColumnName("number_of_employees");

                    b.Property<string>("OperationalHours")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("operational_hours");

                    b.Property<string>("SecurityLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("security_level");

                    b.Property<decimal?>("WarehouseArea")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("warehouse_area");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("warehouse_name");

                    b.Property<int?>("YearBuilt")
                        .HasColumnType("int")
                        .HasColumnName("year_built");

                    b.HasKey("Id")
                        .HasName("warehouse_id_primary");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Wine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AcidityLevel")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("acidity_level");

                    b.Property<decimal?>("AlcoholContent")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("alcohol_content");

                    b.Property<int?>("AvailableStock")
                        .HasColumnType("int")
                        .HasColumnName("available_stock");

                    b.Property<string>("BottleSize")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bottle_size");

                    b.Property<decimal?>("BottleWeight")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("bottle_weight");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("FermentationProcess")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fermentation_process");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("harvest_date");

                    b.Property<string>("LabelImageUrl")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("label_image_url");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("SweetnessLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sweetness_level");

                    b.Property<string>("TanninContent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tannin_content");

                    b.Property<int>("Vintage")
                        .HasColumnType("int")
                        .HasColumnName("vintage");

                    b.Property<string>("WineAgeingTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wine_ageing_time");

                    b.Property<long>("WineCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("wine_category_id");

                    b.Property<string>("WineName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("wine_name");

                    b.Property<string>("WineStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wine_status");

                    b.HasKey("Id")
                        .HasName("wine_id_primary");

                    b.HasIndex("WineCategoryId");

                    b.ToTable("Wine", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.WineCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AcidityLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("acidity_level");

                    b.Property<string>("AgeingPotential")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ageing_potential");

                    b.Property<string>("AromaProfile")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("aroma_profile");

                    b.Property<string>("BottleShape")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bottle_shape");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.Property<string>("Color")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("FlavorProfile")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("flavor_profile");

                    b.Property<string>("FoodPairing")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("food_pairing");

                    b.Property<string>("GrapeVariety")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("grape_variety");

                    b.Property<string>("IdealServingTemp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ideal_serving_temp");

                    b.Property<string>("ProductionMethod")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("production_method");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("region");

                    b.Property<string>("SugarContent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sugar_content");

                    b.Property<string>("TanninLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tannin_level");

                    b.Property<string>("Vineyard")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("vineyard");

                    b.HasKey("Id")
                        .HasName("wine_category_id_primary");

                    b.ToTable("Wine_Category", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.WineWarehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("arrival_date");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("departure_date");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiry_date");

                    b.Property<string>("HandlingInstructions")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("handling_instructions");

                    b.Property<decimal?>("HumidityLevel")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("humidity_level");

                    b.Property<long>("ImportRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("import_request_id");

                    b.Property<string>("InspectionStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("inspection_status");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_inspection_date");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("Rack")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("rack");

                    b.Property<string>("Section")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("section");

                    b.Property<decimal?>("StorageTemperature")
                        .HasColumnType("decimal(4, 2)")
                        .HasColumnName("storage_temperature");

                    b.Property<long>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WarehouseLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("warehouse_location");

                    b.Property<string>("WineCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("wine_code");

                    b.Property<string>("WineCondition")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("wine_condition");

                    b.Property<long>("WineId")
                        .HasColumnType("bigint")
                        .HasColumnName("wine_id");

                    b.Property<string>("WineName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("wine_name");

                    b.HasKey("Id")
                        .HasName("wine_warehouse_id_primary");

                    b.HasIndex("ImportRequestId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WineId");

                    b.ToTable("Wine_Warehouse", (string)null);
                });

            modelBuilder.Entity("WWMS.DAL.Entities.AdditionalImportRequest", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.ExportRequest", "ExportRequest")
                        .WithMany("AdditionalImportRequests")
                        .HasForeignKey("ExportRequestId")
                        .IsRequired()
                        .HasConstraintName("export_request_foreign_3");

                    b.HasOne("WWMS.DAL.Entities.ImportRequest", "ImportRequest")
                        .WithMany("AdditionalImportRequests")
                        .HasForeignKey("ImportRequestId")
                        .IsRequired()
                        .HasConstraintName("import_request_foreign_3");

                    b.HasOne("WWMS.DAL.Entities.InventoryCheckRequest", "InventoryCheckRequest")
                        .WithMany("AdditionalImportRequests")
                        .HasForeignKey("InventoryCheckRequestId")
                        .IsRequired()
                        .HasConstraintName("inventory_check_request_foreign_3");

                    b.HasOne("WWMS.DAL.Entities.User", "User")
                        .WithMany("AdditionalImportRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_foreign_5");

                    b.Navigation("ExportRequest");

                    b.Navigation("ImportRequest");

                    b.Navigation("InventoryCheckRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.AuditLog", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.CheckRequestWarehouse", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.InventoryCheckRequest", "InventoryCheckRequest")
                        .WithMany("CheckRequestWarehouses")
                        .HasForeignKey("InventoryCheckRequestId")
                        .IsRequired()
                        .HasConstraintName("inventory_check_request_foreign_2");

                    b.HasOne("WWMS.DAL.Entities.Warehouse", "Warehouse")
                        .WithMany("CheckRequestWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("warehouse_foreign");

                    b.Navigation("InventoryCheckRequest");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ExportRequest", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.User", "User")
                        .WithMany("ExportRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_foreign_2");

                    b.HasOne("WWMS.DAL.Entities.Wine", "Wine")
                        .WithMany("ExportRequests")
                        .HasForeignKey("WineId")
                        .IsRequired()
                        .HasConstraintName("wine_foreign_2");

                    b.Navigation("User");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ExportWineWarehouse", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.ExportRequest", "ExportRequest")
                        .WithMany("ExportWineWarehouses")
                        .HasForeignKey("ExportRequestId")
                        .IsRequired()
                        .HasConstraintName("export_request_foreign_2");

                    b.HasOne("WWMS.DAL.Entities.WineWarehouse", "WineWarehouse")
                        .WithMany("ExportWineWarehouses")
                        .HasForeignKey("WineWarehouseId")
                        .IsRequired()
                        .HasConstraintName("wine_warehouse_foreign");

                    b.Navigation("ExportRequest");

                    b.Navigation("WineWarehouse");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ImportRequest", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.User", "User")
                        .WithMany("ImportRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_foreign_4");

                    b.HasOne("WWMS.DAL.Entities.Wine", "Wine")
                        .WithMany("ImportRequests")
                        .HasForeignKey("WineId")
                        .IsRequired()
                        .HasConstraintName("wine_foreign");

                    b.Navigation("User");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.InventoryCheckRequest", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.User", "User")
                        .WithMany("InventoryCheckRequests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_foreign_8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Report", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.AdditionalImportRequest", "AdditionalImportRequest")
                        .WithOne("Report")
                        .HasForeignKey("WWMS.DAL.Entities.Report", "AdditionalImportRequestId")
                        .HasConstraintName("additional_import_request_foreign");

                    b.HasOne("WWMS.DAL.Entities.ExportRequest", "ExportRequest")
                        .WithOne("Report")
                        .HasForeignKey("WWMS.DAL.Entities.Report", "ExportRequestId")
                        .HasConstraintName("export_request_foreign");

                    b.HasOne("WWMS.DAL.Entities.ImportRequest", "ImportRequest")
                        .WithOne("Report")
                        .HasForeignKey("WWMS.DAL.Entities.Report", "ImportRequestId")
                        .HasConstraintName("import_request_foreign");

                    b.HasOne("WWMS.DAL.Entities.InventoryCheckRequest", "InventoryCheckRequest")
                        .WithOne("Report")
                        .HasForeignKey("WWMS.DAL.Entities.Report", "InventoryCheckRequestId")
                        .HasConstraintName("inventory_check_request_foreign");

                    b.HasOne("WWMS.DAL.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_foreign_6");

                    b.Navigation("AdditionalImportRequest");

                    b.Navigation("ExportRequest");

                    b.Navigation("ImportRequest");

                    b.Navigation("InventoryCheckRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Wine", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.WineCategory", "WineCategory")
                        .WithMany("Wines")
                        .HasForeignKey("WineCategoryId")
                        .IsRequired()
                        .HasConstraintName("wine_category_foreign");

                    b.Navigation("WineCategory");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.WineWarehouse", b =>
                {
                    b.HasOne("WWMS.DAL.Entities.ImportRequest", "ImportRequest")
                        .WithMany("WineWarehouses")
                        .HasForeignKey("ImportRequestId")
                        .IsRequired()
                        .HasConstraintName("import_request_foreign_2");

                    b.HasOne("WWMS.DAL.Entities.Warehouse", "Warehouse")
                        .WithMany("WineWarehouses")
                        .HasForeignKey("WarehouseId")
                        .IsRequired()
                        .HasConstraintName("warehouse_foreign_2");

                    b.HasOne("WWMS.DAL.Entities.Wine", "Wine")
                        .WithMany("WineWarehouses")
                        .HasForeignKey("WineId")
                        .IsRequired()
                        .HasConstraintName("wine_foreign_3");

                    b.Navigation("ImportRequest");

                    b.Navigation("Warehouse");

                    b.Navigation("Wine");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.AdditionalImportRequest", b =>
                {
                    b.Navigation("Report");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ExportRequest", b =>
                {
                    b.Navigation("AdditionalImportRequests");

                    b.Navigation("ExportWineWarehouses");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.ImportRequest", b =>
                {
                    b.Navigation("AdditionalImportRequests");

                    b.Navigation("Report");

                    b.Navigation("WineWarehouses");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.InventoryCheckRequest", b =>
                {
                    b.Navigation("AdditionalImportRequests");

                    b.Navigation("CheckRequestWarehouses");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.User", b =>
                {
                    b.Navigation("AdditionalImportRequests");

                    b.Navigation("AuditLogs");

                    b.Navigation("ExportRequests");

                    b.Navigation("ImportRequests");

                    b.Navigation("InventoryCheckRequests");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Warehouse", b =>
                {
                    b.Navigation("CheckRequestWarehouses");

                    b.Navigation("WineWarehouses");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.Wine", b =>
                {
                    b.Navigation("ExportRequests");

                    b.Navigation("ImportRequests");

                    b.Navigation("WineWarehouses");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.WineCategory", b =>
                {
                    b.Navigation("Wines");
                });

            modelBuilder.Entity("WWMS.DAL.Entities.WineWarehouse", b =>
                {
                    b.Navigation("ExportWineWarehouses");
                });
#pragma warning restore 612, 618
        }
    }
}
